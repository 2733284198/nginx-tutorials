= Nginx 配置指令的执行顺序（十一） =

紧跟在 C<post-access> 阶段之后的是 C<try-files> 阶
段。这个阶段专门用于实现标准配置指令 L<ngx_core/try_files>
的功能，并不支持 Nginx 模块注册处理程序。由于 L<ngx_core/try_files>
指令在许多 FastCGI 应用的配置中都有应用，所以我们不妨在这里简单介绍一下
它。

L<ngx_core/try_files> 指令接受任意多个参数（但不能少于两个
），每个参数都指定了一个 URI. 这里我们假设配置了 C<N> 个参数，则 Nginx
会在 C<try-files> 阶段依次把前 C<N - 1> 个参数映射为文件
系统上的文件或者目录的路径，然后检查这些文件或者目录是否存在。一旦发现某个文件或
者目录存在，Nginx 就会在 C<try-files> 阶段把当前请求的 URI
改写为此文件
或者目录所对应的参数 URI（但不会包含末尾的斜扛字符，也不会发生 “内部跳转”
）. 如果前 C<N -
1> 个参数所对应的文件或者目录都不存在，C<try-files> 阶段就会立即
发起“内部跳转”到最后一个参数，即第 C<N> 个参数，所指定的 URI.

前面我们在 L<ordertut/（六）> 和 L<ordertut/（七）>
中已经看到了那些静态资源服务模块会把
当前请求的 URI 映射到文件系统，通过 L<ngx_core/root> 配置
指令所指定的“文档根目录”来进行映射。例如，当“文档根目录”是 F</var/www/>
的时候，请求 URI C</foo/bar> 会被映射为文件 F</var/www/foo/bar>，
而请求 URI C</foo/baz/> 则会被映射为目录 F</var/www/foo/baz/>.
注意这里是如何通过 URI 末尾的斜杠字符是否存在来区分“文件目录”和“文件”的
。我们正在讨论的 L<ngx_core/try_files> 配置指令使用同样的
规则来完成其各个参数所指定的 URI 到文件系统对象的映射。

我们不妨来看下面这个例子：

    :nginx
    root /var/www/;

    location /test {
        try_files /foo /bar/ /baz;
        echo "uri: $uri";
    }

    location /foo {
        echo foo;
    }

    location /bar/ {
        echo bar;
    }

    location /baz {
        echo baz;
    }

这里我们通过 L<ngx_core/root> 指令配置了“文档根目录”是 F</var/www/>，
如果 F</var/www/> 在你的系统上存放着重要数据，你可以把它替换为其他
任意路径，但对运行 Nginx worker 进程的系统帐号至少需要有读权限。我
们在 C<location /test> 中使用了 L<ngx_core/try_files>
配置指令，并提供了三个参数，C</foo>, C</bar/>, 和 C</baz>.
根据前面对 L<ngx_core/try_files> 指令的介绍，我们可以知道
，它会在 C<try-files> 阶段依次检查前两个参数，C</foo> 和
C</bar/>，所对应的文件系统对象的存在性。

不妨先来做一组实验。假设现在 F</var/www/> 路径下是空的，则第一个参
数，C</foo>
映射成的文件，C</var/www/foo>，是不存在的；同样，对于第二个参数，
C</bar/> 所映射为的目录，C</var/www/bar/>，也是不存在的
。于是，此时，Nginx 会在 C<try-files> 阶段发起到最后一个参数
所指定的 URI，即 C</baz> 的“内部跳转”。实际的请求结果证实了这一点
：

    :bash
    $ curl localhost:8080/test
    baz

显然，该请求最终和 C<location /baz> 绑定在一起，执行了输出 C<baz>
字符串的工作。上例中定义的 C<location /foo> 和 C<location
/bar/> 完全不会参与到这里的运行过程，因为对于 L<ngx_core/try_files>
的前 C<N - 1> 个参数，Nginx 只会去文件系统，不会去做 URI 与
C<location> 的匹配。

对于上面这个请求，Nginx 会产生类似下面这样的“调试日志”：

    :bash
    $ grep trying logs/error.log
    [debug] 3869#0: *1 trying to use file: "/foo" "/var/www/foo"
    [debug] 3869#0: *1 trying to use dir: "/bar" "/var/www/bar"
    [debug] 3869#0: *1 trying to use file: "/baz" "/var/www/baz"

通过这些信息可以清楚地看到 C<try-files> 阶段发生的事情：Nginx
依次检查了文件 F</var/www/foo> 和目录 F</var/www/bar>，
最后又处理了最后一个参数 C</baz>. 这里最后一条“调试信息”容易产生误解
，以为 Nginx 也把最后一个参数 C</baz> 给映射成了文件系统对象进行
检查，其实并非如此。当 L<ngx_core/try_files> 指令处理到它
的最后一个参数时，总是直接执行“内部跳转”，而不论其对应的文件系统对象是否存在。

接下来再做一组实验：在 F</var/www/> 下创建一个名为 F<foo>
的文件，其内容为 C<hello world>（注意你需要有 F</var/www/>
目录下的写权限）：

    :bash
    $ echo 'hello world' > /var/www/foo

然后再请求 C</test> 接口：

    :bash
    $ curl localhost:8080/test
    uri: /foo

这里发生了什么？我们来看，L<ngx_core/try_files> 指令的第一
个参数 C</foo> 可以映射为文件 F</var/www/foo>，而 Nginx
在 C<try-files> 阶段发现此文件确实存在，于是立即把当前请求的 URI
改写为了这个参数的值，即 C</foo>，并且不再继续检查后面的参数，而直接运行
后面的请求处理阶段。

上面这个请求在 C<try-files> 阶段所产生的 Nginx “调试日志”
如下：

    :bash
    $ grep trying logs/error.log
    [debug] 4132#0: *1 trying to use file: "/foo" "/var/www/foo"

显然，在 C<try-files> 阶段，Nginx 确实只检查和处理了 C</foo>
这第一个参数，后面的参数都被“短路”掉了。

类似地，假设我们删除刚才创建的 F</var/www/foo> 文件，而在 F</var/www/>
下创建一个名为 C<bar> 的子目录：

    :bash
    $ mkdir /var/www/bar

则请求 C</test> 的结果也是类似的：

    :nginx
    $ curl localhost:8080/test
    uri: /bar

在这种情况下，Nginx 在 C<try-files> 阶段发现第一个参数 C</foo>
对应的文件不存在，就会转向检查第二个参数对应的文件系统对象，在这里是目录 F</var/www/bar/>.
由于此目录存在，Nginx 就会把当前请求的 URI 改写为第二个参数的值，即
C</bar>（注意，原始参数值是 C</bar/>，但 L<ngx_core/try_files>
会自动去除末尾的斜扛字符）。

这一组实验所产生的“调试日志”如下：

    :bash
    $ grep trying logs/error.log
    [debug] 4223#0: *1 trying to use file: "/foo" "/var/www/foo"
    [debug] 4223#0: *1 trying to use dir: "/bar" "/var/www/bar"

我们看到，L<ngx_core/try_files> 指令在这里只检查和处理了它
的前两个参数。

通过前面这几组实验，我们不难看到，L<ngx_core/try_files> 指
令本质上只是有条件地改写当前请求的 URI，而这里说的“条件”其实就是文件系统上
的对象是否存在。当“条件”都不满足时，它就会无条件地发起一个指定的“内部跳转”。
当然，除了无条件地发起“内部跳转”之外，L<ngx_core/try_files>
指令还支持直接返回指定状态码的 HTTP 出错页，例如：

    :nginx
    try_files /foo /bar/ =404;

这行配置是说，当 C</foo> 和 C</bar/> 参数所对应的文件系统对象
都不存在时，就直接返回 C<404 Not Found> 出错页。注意这里它是如
何使用等号字符前缀来标识出错码的。

