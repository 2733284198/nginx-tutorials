= Nginx Variables (04) =

== Value Containers for Caching & ngx_map ==

Some Nginx variables choose to use their value containers as a data cache when
the "get handler" is configured. In this setting, the "get handler" is run only
once, i.e., at the first time the variable is read, which reduces overhead when
the variable is read multiple times during its lifetime. Let's see an example
for this.

    :nginx
    map $args $foo {
        default     0;
        debug       1;
    }

    server {
        listen 8080;

        location /test {
            set $orig_foo $foo;
            set $args debug;

            echo "original foo: $orig_foo";
            echo "foo: $foo";
        }
    }

Here we use the L<ngx_map/map> directive from the standard module L<ngx_map>
for the first time, which deserves some introduction. The word C<map> here
means mapping or correspondence. For example, functions in Maths are a kind of
"mapping". And Nginx's L<ngx_map/map> directive is used to define a "mapping"
relationship between two Nginx variables, or in other words, "function
relationship". Back to this example, we use the L<ngx_map/map> directive to
define the "mapping" relationship between user variable C<$foo> and built-in
variable L<ngx_core/$args>. When using the Math function notation, C<y = f(x)>,
our C<$args> variable is effectively the "independent variable", C<x>, while
C<$foo> is the "dependent variable", C<y>. That is, the value of C<$foo>
depends on the value of L<ngx_core/$args>, or rather, we I<map> the value of
L<ngx_core/$args> onto the C<$foo> variable (in some way).

Now let's look at the exact mapping rule defined by the L<ngx_map/map>
directive in this example.

    :nginx
    map $args $foo {
        default     0;
        debug       1;
    }

The first line within the curly braces is a special rule condition, that is,
this condition holds if and only if other conditions all fail. When this
"default" condition holds, the "dependent variable" C<$foo> is assigned by the
value C<0>. The second line within the curly braces means that the "dependent
variable" C<$foo> is assigned by the value C<1> if the "independent variable"
C<$args> matches the string value C<debug>. Combining these two lines, we
obtain the following complete mapping rule: if the value of L<ngx_core/$args>
is C<debug>, variable C<$foo> gets the value C<1>; otherwise C<$foo> gets the
value C<0>. So essentially, this is a conditional assignment to the variable
C<$foo>.

Now that we understand what the L<ngx_map/map> directive does, let's look at
the definition of C<location /test>. We first save the value of C<$foo> into
another user variable C<$orig_foo>, then overwrite the value of
L<ngx_core/$args> to C<debug>, and finally output the values of C<$orig_foo>
and C<$foo>, respectively.

Intuitively, after we overwrite the value of L<ngx_core/$args> to C<debug>, the
value of C<$foo> should automatically get adjusted to C<1> according to the
mapping rule defined earlier, regardless of the original value of C<$foo>. But
the test result suggests the other way around.

    :bash
    $ curl 'http://localhost:8080/test'
    original foo: 0
    foo: 0

The first output line indicates that the value of C<$orig_foo> is C<0>, which
is exactly what we expected: the original request does not take a URL query
string, so the initial value of L<ngx_core/$args> is empty, leading to the C<0>
initial value of C<$foo>, according to the "default" condition in our mapping
rule.

But surprisingly, the second output line indicates that the final value of
C<$foo> is still C<0>, even after we overwrite L<ngx_core/$args> to the value
C<debug>. This apparently violates our mapping rule because when
L<ngx_core/$args> takes the value C<debug>, the value of C<$foo> should really
be C<1>. So what is happening here?

Actually the reason is pretty simple: when the first time variable C<$foo> is
read, its value computed by L<ngx_map>'s "get handler" is
cached in its value container. We already learned earlier that Nginx modules
may choose to use the value container of the variable created by themselves as
a data cache for its "get handler". Obviously, the L<ngx_map> module considers
the mapping computation between variables expensive enough and caches the result
automatically, so that the next time the same variable is read within the
lifetime of the current request, Nginx can just return the cached result
without invoking the "get handler" again.

To verify this further, we can try specifying the URL query string as C<debug>
in the original request.

    :bash
    $ curl 'http://localhost:8080/test?debug'
    original foo: 1
    foo: 1

It can be seen that the value of C<$orig_foo> becomes C<1>, complying with our
mapping rule. And subsequent readings of C<$foo> always yield the same cached
result, C<1>, regardless of the new value of L<ngx_core/$args> later on.

The L<ngx_map/map> directive is actually a unique example, because it not only
registers a "get handler" for the user variable, but also allows the user to
define the computing rule in the "get handler" directly in the Nginx
configuration file. Of course, the rule that can be defined here is limited to
simple mapping relations with another variable. Meanwhile, it must be made
clear that not all the variables using a "get handler" will cache the result.
For instance, we have already seen earlier that the L<$arg_XXX> variable does
not use its value container at all.

Similar to the L<ngx_map> module, the standard module L<ngx_geo> that we
encountered earlier also enables value caching for the variables created by its
L<ngx_geo/geo> directive.

=== A Side Note for Use Contexts of Directives ===

In the previous example, we should also note that the L<ngx_map/map> directive
is put outside the C<server> configuration block, that is, it is defined
directly within the outermost C<http> configuration block. Some readers may be
curious about this setting, since we only use it in C<location /test> after
all. If we try putting the L<ngx_map/map> statement within the C<location>
block, however, we will get the following error while starting Nginx:

    [emerg] "map" directive is not allowed here in ...

So it is explicitly prohibited. In fact, it is only allowed to use the
L<ngx_map/map> directive in the C<http>
block. Every configure directive does have a pre-defined set of use contexts in
the configuration file. When in doubt, always refer to the corresponding
documentation for the exact use contexts of a particular directive.

== Lazy Evaluation of Variable Values ==

Many Nginx freshmen would worry that the use of the L<ngx_map/map> directive
within the global scope (i.e., the C<http> block) will lead to unnecessary
variable value computation and assignment for all the C<location>s in all the
virtual servers even if only one C<location> block actually uses it.
Fortunately, this is I<not> what is happening here. We have already learned how
the L<ngx_map/map>
directive works. It is the "get handler" (registered by the L<ngx_map> module)
that performs the value computation and related assignment. And the "get
handler" will not run at all
unless the corresponding user variable is actually being read. Therefore, for
those requests that never access that variable, there cannot be any (useless)
computation involved.

The technique that postpones the value computation off to the point where the
value is actually needed is called "lazy evaluation" in the computing world.
Programming languages natively offering "lazy evaluation" is not very
common though. The most famous example is the Haskell programming language,
where lazy evaluation is the default semantics. In contrast with "lazy
evaluation", it is much more common to see "eager evaluation". We are lucky
to see examples of lazy evaluation here in the L<ngx_map> module, but
the "eager evaluation" semantics is also much more common in the Nginx
world. Consider the following L<ngx_rewrite/set> statement that cannot be
simpler:

    :nginx
    set $b "$a,$a";

When running the L<ngx_rewrite/set> directive, Nginx eagerly
computes and assigns the new value for the variable C<$b> without postponing to
the point when C<$b> is actually read later on. Similarly, the
L<ngx_set_misc/set_unescape_uri> directive also evaluates eagerly.

