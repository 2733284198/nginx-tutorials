= Nginx Variables (03) =

=== Writable Built-in Variable $args ===

Some built-in variables are writable as well. For instance, when reading the
built-in variable L<ngx_core/$args>, we get the URL query string of the current
request, but when writing to it, we are effectively modifying the
query string. Here is such an example:

    :nginx
    location /test {
        set $orig_args $args;
        set $args "a=3&b=4";

        echo "original args: $orig_args";
        echo "args: $args";
    }

Here we first save the original URL query string into our own variable
C<$orig_args>, then modify the current query string by overriding the
L<ngx_core/$args> variable, and finally output the variables C<$orig_args> and
L<ngx_core/$args>, respectively, with the L<ngx_echo/echo> directive. Let's
test it like this:

    :bash
    $ curl 'http://localhost:8080/test'
    original args:
    args: a=3&b=4

    $ curl 'http://localhost:8080/test?a=0&b=1&c=2'
    original args: a=0&b=1&c=2
    args: a=3&b=4

In the first test, we did not provide any URL query string, hence the empty
output for the C<$orig_args> variable. And in both tests, the current query
string was forcibly overridden to the new value C<a=3&b=4>, regardless of the
presence of a query string in the original request.

It should be noted that the L<ngx_core/$args> variable here no longer owns a
value container as user variables, just like L<$arg_XXX>. When reading
L<ngx_core/$args>, Nginx will execute a special piece of code, fetching data
from
a particular place where the Nginx core stores the URL query string for the
current request. On the
other hand, when we overwrite L<ngx_core/$args>, Nginx will execute another
special piece of code, storing new value into the same place in the core.
Other parts of Nginx also read the same place whenever the query string is
needed, so our modification to L<ngx_core/$args> will immediately affect all
the other parts' functionality later on. Let's see an example for this:

    :nginx
    location /test {
        set $orig_a $arg_a;
        set $args "a=5";
        echo "original a: $orig_a";
        echo "a: $arg_a";
    }

Here we first save the value of the built-in varaible C<$arg_a>, the value of
the original request's URL argument C<a>, into our user variable C<$orig_a>,
then change the URL query string to C<a=5> by assigning the new value to the
built-in variable L<ngx_core/$args>, and finally output the variables
C<$orig_a> and C<$arg_a>, respectively. Because modifications to
L<ngx_core/$args> effectively change the URL query string of the current
request for the whole server, the value of the built-in variable
L<$arg_XXX> should also change accordingly. The test result verifies this:

    :bash
    $ curl 'http://localhost:8080/test?a=3'
    original a: 3
    a: 5

We can see that the initial value of C<$arg_a> is C<3> since the URL query
string of the original request is C<a=3>. But the final value of C<$arg_a>
automatically becomes C<5> after we modify L<ngx_core/$args> with the value
C<a=5>.

Below is another example to demonstrate that assignments to C<$args> also
affect the HTTP proxy module L<ngx_proxy>.

    :nginx
    server {
        listen 8080;

        location /test {
            set $args "foo=1&bar=2";
            proxy_pass http://127.0.0.1:8081/args;
        }
    }

    server {
        listen 8081;

        location /args {
            echo "args: $args";
        }
    }

Two virtual servers are defined here in the C<http> configuration block
(omitted for brevity).

The first virtual server is listening at the local port 8080. Its C</test>
location first updates the current URL query string to the value C<foo=1&bar=2>
by writing to L<ngx_core/$args>, then sets up an HTTP
reverse proxy via the L<ngx_proxy/proxy_pass> directive of the L<ngx_proxy>
module, targeting the HTTP service C</args> on the local port 8081. By default
the L<ngx_proxy> module automatically forwards the current URL
query string to the remote HTTP service.

The "remote HTTP service" on the local port 8081 is provided by the second
virtual server defined by ourselves, where we output the current URL query
string
via the L<ngx_echo/echo> directive in C<location
/args>. By doing this, we can investigate the actual URL query string forwarded
by the L<ngx_proxy> module from the first virtual server.

Let's access the C</test> interface exposed by the first virtual server.

    :bash
    $ curl 'http://localhost:8080/test?blah=7'
    args: foo=1&bar=2

We can see that the URL query string is first rewritten to C<foo=1&bar=2> even
though the original request takes the value C<blah=7>, then it is forwarded to
the C</args> interface of the second virtual server via the
L<ngx_proxy/proxy_pass> directive, and finally its value is output to the
client.

To summarize, the assignment to L<ngx_core/$args> also successfully influences
the behavior of the L<ngx_proxy> module.

== Variable "Get Handlers" and "Set Handlers" ==

We have already learned in previous sections that when reading the built-in
variable L<ngx_core/$args>, Nginx executes a special piece of code to obtain a
value on-the-fly and when writing to this variable, Nginx executes another
special piece of code to propagate the change. In Nginx's terminology, the
special code executed for reading the variable is called "get handler"
and the code for writing to the variable is called "set handler". Different
Nginx modules usually prepare different "get handlers" and "set handlers" for
their own variables, which effectively put magic into these variables'
behavior.

Such techniques are not uncommon in the computing world. For example, in
object-oriented programming (OOP), the class designer usually does not expose
the member variable of the class directly to the user programmer, but instead
provides
two methods for reading from and writing to the member variable, respectively.
Such class methods are often called "accessors". Below is an example in the C++
programming language:

    :cpp
    #include <string>
    using namespace std;

    class Person {
    public:
        const string get_name() {
            return m_name;
        }

        void set_name(const string name) {
            m_name = name;
        }

    private:
        string m_name;
    };

In this C++ class C<Person>, we provide two public methods, C<get_name> and
C<set_name>, to serve as the "accessors" for the private member variable
C<m_name>.

The benefits of such design are obvious. The class designer can execute
arbitrary
code in the "accessors", to implement any extra business logic or useful side
effects, like automatically updating other member variables depending on the
current member, or updating the corresponding
field in a database associated with the current object. For the latter case, it
is possible that the member variable
does not exist at all, or that the member variable just serves as a data cache
to mitigate the pressure on the back-end database.

Corresponding to the concept of "accessors" in OOP, Nginx variables also support
binding custom "get handlers" and "set handlers". Additionally, not all Nginx
variables
own a container to hold values. Some variables without a container just behave
like a magical container by means of its fancy "get handler" and "set handler".
In fact, when a variable is being created at "configure time", the creating
Nginx module must make a decision on whether to allocate a value container for
it and whether to attach a custom "get handler" and/or a "set handler" to it.

Those variables owning a value container are called "indexed variables" in
Nginx's terminology. Otherwise, they are said to be not indexed.

We already know that the "variable groups" like L<$arg_XXX> discussed in earlier
sections do not have a value container and thus are not indexed. When reading
L<$arg_XXX>, it is its "get handler" at work, that is, its "get handler" scans
the current URL query string on-the-fly, extracting the value of the specified
URL argument. Many beginners misunderstand the way L<$arg_XXX> is implemented;
they assume that Nginx will parse all the URL arguments in advance and prepare
the
values for all those non-empty L<$arg_XXX> variables before they are actually
read. This is not true, however. Nginx never tries to parse all the URL
arguments beforehand, but rather scans the whole URL query string for a
particular argument in a "get handler" every time that argument is requested by
reading the corresponding L<$arg_XXX> variable. Similarly, when reading the
built-in variable L<$cookie_XXX>, its "get handler" just scans the C<Cookie>
request headers for the cookie name specified.

